/*Task 1
a) Binary Search
#include <stdio.h>
int main()
{
    int i, low, high, mid, n, key, array[100];
    printf("Enter number of elements: ");
    scanf("%d",&n);
    printf("Enter %d integers in sorted manner: ", n);
    for(i = 0; i < n; i++)
        scanf("%d",&array[i]);
    printf("Enter value to find: ");
    scanf("%d", &key);
    low = 0;
    high = n - 1;
    mid = (low+high)/2;
    while (low <= high) {
        if(array[mid] < key)
            low = mid + 1;
        else if (array[mid] == key) {
            printf("%d found at location %d", key, mid+1);
            break;
        }
        else
            high = mid - 1;
        mid = (low + high)/2;
    }
    if(low > high)
        printf("Not found! %d isn't present in the list-n", key);
    return 0;
}
b) Quick Sort
#include<stdio.h>
void quicksort(int number[25],int first,int last){
    int i, j, pivot, temp;
    if(first<last){
    i=first;
    j=last;
    while(i<j){
        while(number[i]<=number[pivot]&&i<last)
            i++;
        while(number[j]>number[pivot])
            j--;
        if(i<j){
            temp=number[i];
            number[i]=number[j];
            number[j]=temp;
        }
    }
    temp=number[pivot];
    number[pivot]=number[j];
    number[j]=temp;
    quicksort(number,first,j-1);
    quicksort(number,j+1,last);
    }
}
int main(){
    int i, count, number[25];
    printf("Enter some elements (Max. - 25): ");
    scanf("%d",&count);
    printf("Enter %d elements: ", count);
    for(i=0;i<count;i++)
        scanf("%d",&number[i]);
    quicksort(number,0,count-1);
    printf("The Sorted Order is: ");
    for(i=0;i<count;i++)
        printf(" %d",number[i]);
    return 0;
}

Task 2
a) Merge Sort
#include<stdio.h>
void mergesort(int a[],int i,int j);
void merge(int a[],int i1,int j1,int i2,int j2);
int main()
{
    int a[30],n,i;
    printf("Enter no of elements:");
    scanf("%d",&n);
    printf("Enter array elements:");
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);
    mergesort(a,0,n-1);
    printf("\nSorted array is :");
    for(i=0;i<n;i++)
        printf("%d ",a[i]);
    return 0;
}
void mergesort(int a[],int i,int j)
{
    int mid;
    if(i<j)
    {
    mid=(i+j)/2;
    mergesort(a,i,mid); 
    mergesort(a,mid+1,j);
    merge(a,i,mid,mid+1,j);
    }
}
void merge(int a[],int i1,int j1,int i2,int j2)
{
    int temp[50];
    int i,j,k;
    i=i1; 
    j=i2;
    k=0;
    while(i<=j1 && j<=j2) 
    {
        if(a[i]<a[j])
            temp[k++]=a[i++];
        else
            temp[k++]=a[j++];
    }
    while(i<=j1)
        temp[k++]=a[i++];
    while(j<=j2) 
        temp[k++]=a[j++];

    for(i=i1,j=0;i<=j2;i++,j++)
        a[i]=temp[j];
}
b) strassen matrix multiplication
#include<stdio.h>
int main(){
    int a[2][2], b[2][2], c[2][2], i, j;
    int m1, m2, m3, m4 , m5, m6, m7;
    printf("Enter the 4 elements of first matrix: ");
    for(i = 0;i < 2; i++)
        for(j = 0;j < 2; j++)
            scanf("%d", &a[i][j]);
    printf("Enter the 4 elements of second matrix: ");
    for(i = 0; i < 2; i++)
        for(j = 0;j < 2; j++)
            scanf("%d", &b[i][j]);
    printf("\nThe first matrix is\n");
    for(i = 0; i < 2; i++){
        printf("\n");
        for(j = 0; j < 2; j++)
            printf("%d\t", a[i][j]);
    }
    printf("\nThe second matrix is\n");
    for(i = 0;i < 2; i++){
        printf("\n");
        for(j = 0;j < 2; j++)
            printf("%d\t", b[i][j]);
    }
    m1= (a[0][0] + a[1][1]) * (b[0][0] + b[1][1]);
    m2= (a[1][0] + a[1][1]) * b[0][0];
    m3= a[0][0] * (b[0][1] - b[1][1]);
    m4= a[1][1] * (b[1][0] - b[0][0]);
    m5= (a[0][0] + a[0][1]) * b[1][1];
    m6= (a[1][0] - a[0][0]) * (b[0][0]+b[0][1]);
    m7= (a[0][1] - a[1][1]) * (b[1][0]+b[1][1]);
    c[0][0] = m1 + m4- m5 + m7;
    c[0][1] = m3 + m5;
    c[1][0] = m2 + m4;
    c[1][1] = m1 - m2 + m3 + m6;
    printf("\nAfter multiplication using Strassen's algorithm \n");
    for(i = 0; i < 2 ; i++){
        printf("\n");
        for(j = 0;j < 2; j++)
            printf("%d\t", c[i][j]);
    }
    return 0;
}

Task 3
kinda wrong
Task 4

#include <stdio.h>
int max(int a, int b) { return (a > b) ? a : b; }
int knapSack(int W, int wt[], int val[], int n)
{
    if (n == 0 || W == 0)
        return 0;
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}

int main()
{
    int profit[] = { 20, 25, 40 };
    int weight[] = { 25, 20, 30 };
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    printf("%d", knapSack(W, weight, profit, n));
    return 0;
}

Task 5:
a) Prims's Algorithm
#include<stdio.h>
int a,b,u,v,n,i,j,ne=1;
int visited[10]={0},min,mincost=0,cost[10][10];
void main()
{
    printf("\n Enter the number of nodes:");
    printf("\n Enter the number of nodes:");
    scanf("%d",&n);
    printf("\n Enter the adjacency matrix:\n");
    for(i=1;i<=n;i++)
        for(j=1;j<=n;j++)
        {
            scanf("%d",&cost[i][j]);
            if(cost[i][j]==0)
            cost[i][j]=999;
        }
    visited[1]=1;
    printf("\n");
    while(ne<n)
    {  
    for(i=1,min=999;i<=n;i++)
        for(j=1;j<=n;j++)
        if(cost[i][j]<min)
            if(visited[i]!=0)
                {
                    min=cost[i][j];
                    a=u=i;
                    b=v=j;
                }
    if(visited[u]==0 || visited[v]==0)
    {
        printf("\n Edge %d:(%d %d) cost:%d",ne++,a,b,min);
        mincost+=min;
        visited[b]=1;
    }
    cost[a][b]=cost[b][a]=999;
    }
    printf("\n Minimun cost=%d",mincost);
    getch();
}

Task 12
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<conio.h>
int arr[10000], n;
int partition(int arr[], int m, int p);
void interchange(int arr[], int i, int j);
void QuickSort(int arr[], int p, int q);
void show();
int main()
{
    int i;
    time_t start, end;
    time_t diff;
    printf("\nEnter the number of elements: ");
    scanf("%d", &n);
    rand();
    for(i=0; i<n; i++)
    {       
        arr[i]=rand();  
    }
    printf("\nThe elements are ");
    for(i=0; i<n; i++)
    {
        printf("%d ", arr[i]);
    }
    start=time(NULL);
    printf("\n\nThe passes are:");
    QuickSort(arr, 0, n-1);
    end=time(NULL); 
    diff=difftime(end, start);
    printf("\n\nThe sorted array is ");
    for(i=0; i<n; i++)
        printf("%d ", arr[i]);
    printf("\n\nTime taken is %ld seconds", diff);
    getch();
return 0;
}
int partition(int arr[], int m, int p)
{
    int v=arr[m];
    int i=m;
    int j=p;    
    do
    {   
        do
        i++;
        while(arr[i]<v);
        do  
        j--;
        while(arr[j]>v);
        if(i<j)
        interchange(arr, i, j);
    }while(i<=j);
    arr[m]=arr[j];
    arr[j]=v;
    return j;
}
void interchange(int arr[], int i, int j)
{
    int p;
    p=arr[i];
    arr[i]=arr[j];
    arr[j]=p;
}    
void QuickSort(int arr[], int p, int q)
    {
    int j, k, temp;
    if(p<q)
    {
        k=rand() % (q-p+1)+p;
        interchange(arr, k, p);
        j=partition(arr, p, q+1);
        QuickSort(arr, p, j-1);
        QuickSort(arr, j+1, q);
    }
}
void show()
{
    int j;
    printf("\n");
    for(j=0; j<n; j++)
        printf(" %d", arr[j]);
}
*/
